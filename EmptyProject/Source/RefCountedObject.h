//=======================================================================================
//!	@file	:	RefCountedObject.h
//!	@author	:	è¨éR âlå\
//!	@date	:	2014/4/28
//=======================================================================================
#pragma once

namespace AK
{
class RefCountedObjectPtr;
//=======================================================================================
//!	@class	:	RefCountedObject
//!	@brief	:	example
//!	@par	:	example
//!	@note	:	example
//=======================================================================================
class RefCountedObject
{
public:
	friend RefCountedObjectPtr;

	RefCountedObject() : m_RefCount(0){/*AddRef();*/};



protected:
	virtual ~RefCountedObject()
	{
		assert(m_RefCount == 0);
	};

private:
	void AddRef();
	void SubRef();
	void Release();


	U32 m_RefCount;

};
//=======================================================================================
//		inline method
//=======================================================================================
//---------------------------------------------------------------------------------------
//!	@brief		: 
//---------------------------------------------------------------------------------------
inline void RefCountedObject::AddRef()
{
	++m_RefCount;
}
//---------------------------------------------------------------------------------------
//!	@brief		: 
//---------------------------------------------------------------------------------------
inline void RefCountedObject::SubRef()
{
	--m_RefCount;
}
//---------------------------------------------------------------------------------------
//!	@brief		: 
//---------------------------------------------------------------------------------------
inline void RefCountedObject::Release()
{
	SubRef();
	if (m_RefCount == 0)
		delete this;
}

};
//===============================================================
//	End of File
//===============================================================