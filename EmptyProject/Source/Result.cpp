//=======================================================================================
//!	@file	:	Sample.cpp
//!	@brief	:	Sampleクラスのメンバ関数宣言
//!	@author	:	小山 瑛圭
//!	@date	:	2014/5/01
//!	@par	:	example
//!	@note	:	example
//=======================================================================================
#include "Result.h"
#include "GraphicsManager.h"
#include "SoundManager.h"
#include "RootNode.h"

using namespace AK;
using namespace Sound;
using namespace Graphics;
//=======================================================================================
//		Constants Definitions
//=======================================================================================
static const U32 RESULT_BGM_NUM = 2;

//-------------------------------------------------------------
//!	@brief		: コンストラクタ
//-------------------------------------------------------------
Result::Result(AbsNode* parent)
: SceneNode(parent)
{
}
//-------------------------------------------------------------
//!	@brief		: デストラクタ
//-------------------------------------------------------------
Result::~Result()
{

}
//=======================================================================================
//		public method
//=======================================================================================
//-------------------------------------------------------------
//!	@brief		: 更新
//-------------------------------------------------------------
void Result::Update()
{
	DEBUG_PRINT_CHAR("RESULT");

}
//-------------------------------------------------------------
//!	@brief		: シーン変更
//!	@return		: 変更時なら変更先ポインタ
//-------------------------------------------------------------
SceneNode*	Result::NextScene()
{
	//if (m_IsEnd)
	//	return NEW Stage1(m_Parent, 0);
	return this;
}
//-------------------------------------------------------------
//!	@brief		: 初期化
//!	@return		: 成功(true),失敗(false)
//-------------------------------------------------------------
bool Result::Initialize()
{

	//GraphicsManager::GetInstance()->AddShaderObject(m_FadeOutScreen);
	GraphicsManager::GetInstance()->ReCreateVertexBuffer();
	GraphicsManager::GetInstance()->SetAllStreamSource();
	return true;
}
//=======================================================================================
//		protected method
//=======================================================================================

//=======================================================================================
//		private method
//=======================================================================================
//-------------------------------------------------------------
//!	@brief		: 
//-------------------------------------------------------------

//-------------------------------------------------------------
//!	@brief		: 
//-------------------------------------------------------------

//-------------------------------------------------------------
//!	@brief		: タイトル用ブロック読み込み
//-------------------------------------------------------------

//-------------------------------------------------------------
//!	@brief		: ブロックを動かす
//-------------------------------------------------------------

//===============================================================
//	End of File
//===============================================================