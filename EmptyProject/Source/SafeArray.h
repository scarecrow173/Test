//=======================================================================================
//!	@file	:	SafeArray.h
//!	@author	:	小山 瑛圭
//!	@date	:	2014/5/21
//=======================================================================================
#pragma once

namespace AK
{

//=======================================================================================
//!	@class	:	SafeArray
//!	@brief	:	example
//!	@par	:	example
//!	@note	:	example
//=======================================================================================
template<typename T, const U32 size>
class SafeArray
{
public:
	SafeArray();

	T&			operator [](const U32 index);
	const T&	operator [](const U32 index) const;

	U32	GetSize() const;

private:
	T		m_Data[size];
};
//=======================================================================================
//		inline method
//=======================================================================================
//-------------------------------------------------------------
//!	@brief		: コンストラクタ
//-------------------------------------------------------------
template<typename T, const U32 size>
inline SafeArray<T, size>::SafeArray()
{
	memset(m_Data, 0, sizeof(T) * size);
}
//-------------------------------------------------------------
//!	@brief		: operator[]
//-------------------------------------------------------------
template<typename T, const U32 size>
inline T& SafeArray<T, size>::operator[](const U32 index)
{
	assert(index < size);
	return m_Data[index];
}

//-------------------------------------------------------------
//!	@brief		: operator[]
//-------------------------------------------------------------
template<typename T, const U32 size>
inline const  T& SafeArray<T, size>::operator [](const U32 index) const
{
	assert(index < size);
	return m_Data[index];
}
//=======================================================================================
//		public method
//=======================================================================================

//-------------------------------------------------------------
//!	@brief		: 配列の長さ取得
//!	@return		: 配列サイズ
//-------------------------------------------------------------
template<typename T, const U32 size>
inline U32 SafeArray<T, size>::GetSize() const
{
	return size;
}
};
//===============================================================
//	End of File
//===============================================================